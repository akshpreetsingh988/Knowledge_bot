server_uri: bolt://localhost:7687
admin_user: neo4j
admin_pass: StrongPassword123
database: neo4j
basepath: ./

pre_ingest:
  - CREATE CONSTRAINT person_age IF NOT EXISTS FOR (n:Person) REQUIRE n.age IS UNIQUE;
  - CREATE CONSTRAINT disease_diseasename IF NOT EXISTS FOR (n:Disease) REQUIRE n.diseaseName IS UNIQUE;
  - CREATE CONSTRAINT outcome_outcomeresult IF NOT EXISTS FOR (n:Outcome) REQUIRE n.outcomeResult IS UNIQUE;
files:
- chunk_size: 100
  cql: |-
    WITH $dict.rows AS rows
    UNWIND rows AS row
    MERGE (n:Person {age: toIntegerOrNull(row.Age)})
    SET n.gender = row.Gender
  url: $BASE/./test_dis.csv
- chunk_size: 100
  cql: |
    WITH $dict.rows AS rows
    UNWIND rows AS row
    MERGE (n:Disease {diseaseName: row.Disease})
  url: $BASE/./test_dis.csv
- chunk_size: 100
  cql: |-
    WITH $dict.rows AS rows
    UNWIND rows AS row
    MERGE (n:Symptom {})
    SET n.fever = row.Fever, n.cough = row.Cough, n.fatigue = row.Fatigue, n.difficultyBreathing = row.`Difficulty Breathing`
  url: $BASE/./test_dis.csv
- chunk_size: 100
  cql: |-
    WITH $dict.rows AS rows
    UNWIND rows AS row
    MERGE (n:HealthIndicator {})
    SET n.bloodPressure = row.`Blood Pressure`, n.cholesterolLevel = row.`Cholesterol Level`
  url: $BASE/./test_dis.csv
- chunk_size: 100
  cql: |
    WITH $dict.rows AS rows
    UNWIND rows AS row
    MERGE (n:Outcome {outcomeResult: row.`Outcome Variable`})
  url: $BASE/./test_dis.csv
- chunk_size: 100
  cql: |
    WITH $dict.rows AS rows
    UNWIND rows as row
    MATCH (source:Disease {diseaseName: row.Disease})
    MATCH (target:Person {age: toIntegerOrNull(row.Age)})
    MERGE (source)-[n:HAS_DEMOGRAPHICS]->(target)
  url: $BASE/./test_dis.csv
- chunk_size: 100
  cql: |
    WITH $dict.rows AS rows
    UNWIND rows as row
    MATCH (source:Disease {diseaseName: row.Disease})
    MATCH (target:Symptom {})
    MERGE (source)-[n:HAS_SYMPTOM]->(target)
  url: $BASE/./test_dis.csv
- chunk_size: 100
  cql: |
    WITH $dict.rows AS rows
    UNWIND rows as row
    MATCH (source:Disease {diseaseName: row.Disease})
    MATCH (target:HealthIndicator {})
    MERGE (source)-[n:HAS_LAB]->(target)
  url: $BASE/./test_dis.csv
- chunk_size: 100
  cql: |
    WITH $dict.rows AS rows
    UNWIND rows as row
    MATCH (source:Disease {diseaseName: row.Disease})
    MATCH (target:Outcome {outcomeResult: row.`Outcome Variable`})
    MERGE (source)-[n:HAS_OUTCOME]->(target)
  url: $BASE/./test_dis.csv
