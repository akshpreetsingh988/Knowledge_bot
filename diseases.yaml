server_uri: bolt://localhost:7687
admin_user: neo4j
admin_pass: StrongPassword123
database: neo4j
basepath: ./

pre_ingest:
  - CREATE CONSTRAINT disease_name IF NOT EXISTS FOR (n:Disease) REQUIRE n.name IS UNIQUE;
  - CREATE CONSTRAINT symptom_type IF NOT EXISTS FOR (n:Symptom) REQUIRE n.type IS UNIQUE;
  - CREATE CONSTRAINT bloodpressure_level IF NOT EXISTS FOR (n:BloodPressure) REQUIRE n.level IS UNIQUE;
  - CREATE CONSTRAINT cholesterol_level IF NOT EXISTS FOR (n:Cholesterol) REQUIRE n.level IS UNIQUE;
  - CREATE CONSTRAINT outcome_result IF NOT EXISTS FOR (n:Outcome) REQUIRE n.result IS UNIQUE;
files:
- chunk_size: 100
  cql: |-
    WITH $dict.rows AS rows
    UNWIND rows AS row
    MERGE (n:Person {})
    SET n.age = toIntegerOrNull(row.Age), n.gender = row.Gender
  url: $BASE/./test_dis.csv
- chunk_size: 100
  cql: |
    WITH $dict.rows AS rows
    UNWIND rows AS row
    MERGE (n:Disease {name: row.Disease})
  url: $BASE/./test_dis.csv
- chunk_size: 100
  cql: |
    WITH $dict.rows AS rows
    UNWIND rows AS row
    MERGE (n:Symptom {type: row.Fever})
  url: $BASE/./test_dis.csv
- chunk_size: 100
  cql: |
    WITH $dict.rows AS rows
    UNWIND rows AS row
    MERGE (n:BloodPressure {level: row.`Blood Pressure`})
  url: $BASE/./test_dis.csv
- chunk_size: 100
  cql: |
    WITH $dict.rows AS rows
    UNWIND rows AS row
    MERGE (n:Cholesterol {level: row.`Cholesterol Level`})
  url: $BASE/./test_dis.csv
- chunk_size: 100
  cql: |
    WITH $dict.rows AS rows
    UNWIND rows AS row
    MERGE (n:Outcome {result: row.`Outcome Variable`})
  url: $BASE/./test_dis.csv
- chunk_size: 100
  cql: |
    WITH $dict.rows AS rows
    UNWIND rows as row
    MATCH (source:Person {})
    MATCH (target:Disease {name: row.Disease})
    MERGE (source)-[n:HAS_DISEASE]->(target)
  url: $BASE/./test_dis.csv
- chunk_size: 100
  cql: |
    WITH $dict.rows AS rows
    UNWIND rows as row
    MATCH (source:Person {})
    MATCH (target:Symptom {type: row.Fever})
    MERGE (source)-[n:HAS_SYMPTOM]->(target)
  url: $BASE/./test_dis.csv
- chunk_size: 100
  cql: |
    WITH $dict.rows AS rows
    UNWIND rows as row
    MATCH (source:Person {})
    MATCH (target:BloodPressure {level: row.`Blood Pressure`})
    MERGE (source)-[n:HAS_BLOOD_PRESSURE]->(target)
  url: $BASE/./test_dis.csv
- chunk_size: 100
  cql: |
    WITH $dict.rows AS rows
    UNWIND rows as row
    MATCH (source:Person {})
    MATCH (target:Cholesterol {level: row.`Cholesterol Level`})
    MERGE (source)-[n:HAS_CHOLESTEROL]->(target)
  url: $BASE/./test_dis.csv
- chunk_size: 100
  cql: |
    WITH $dict.rows AS rows
    UNWIND rows as row
    MATCH (source:Person {})
    MATCH (target:Outcome {result: row.`Outcome Variable`})
    MERGE (source)-[n:HAS_OUTCOME]->(target)
  url: $BASE/./test_dis.csv
